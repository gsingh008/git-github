{\rtf1\ansi\ansicpg1252\cocoartf1561\cocoasubrtf610
{\fonttbl\f0\fnil\fcharset0 Menlo-Bold;\f1\fnil\fcharset0 Menlo-Regular;\f2\fnil\fcharset0 Menlo-Italic;
\f3\fnil\fcharset0 Menlo-BoldItalic;}
{\colortbl;\red255\green255\blue255;\red127\green0\blue85;\red106\green62\blue62;\red63\green127\blue95;
\red0\green0\blue192;}
{\*\expandedcolortbl;;\csgenericrgb\c49804\c0\c33333;\csgenericrgb\c41569\c24314\c24314;\csgenericrgb\c24706\c49804\c37255;
\csgenericrgb\c0\c0\c75294;}
\margl1440\margr1440\vieww10800\viewh8400\viewkind0
\deftab720
\pard\pardeftab720\partightenfactor0

\f0\b\fs32 \cf2 package
\f1\b0 \cf0  excercises;\
\

\f0\b \cf2 import
\f1\b0 \cf0  java.util.HashMap;\

\f0\b \cf2 import
\f1\b0 \cf0  java.util.HashSet;\

\f0\b \cf2 import
\f1\b0 \cf0  java.util.Map;\

\f0\b \cf2 import
\f1\b0 \cf0  java.util.Set;\
\

\f0\b \cf2 public
\f1\b0 \cf0  
\f0\b \cf2 class
\f1\b0 \cf0  FindNonDuplicateNumber \{\
\
    
\f0\b \cf2 public
\f1\b0 \cf0  
\f0\b \cf2 static
\f1\b0 \cf0  
\f0\b \cf2 void
\f1\b0 \cf0  main(String[] \cf3 args\cf0 ) \{\
        
\f0\b \cf2 int
\f1\b0 \cf0 [] \cf3 number\cf0  = \{ 1, 2, 2, 4, 3, 5, 2, 1, 1, 2 \};\
        \cf4 // Solution-1st not working need to work on it\cf0 \
        
\f0\b \cf2 int
\f1\b0 \cf0  \cf3 j\cf0  = 
\f2\i findNumber
\f1\i0 (\cf3 number\cf0 );\
\
        System.
\f3\i\b \cf5 out
\f1\i0\b0 \cf0 .println(\cf3 j\cf0 );\
        \cf4 // Solution-2nd\cf0 \
        \cf4 // using set ..its working but \ul cant\ulnone  handle exception if \ul uniq\ulnone  number is not present\cf0 \
        \cf4 // need to fix this\cf0 \
        
\f0\b \cf2 int
\f1\b0 \cf0  \cf3 k\cf0  = 
\f2\i findNumberUsingSet
\f1\i0 (\cf3 number\cf0 );\
        System.
\f3\i\b \cf5 out
\f1\i0\b0 \cf0 .println(\cf3 k\cf0 );\
\
        \cf4 // Solution-3rd\cf0 \
        \cf4 // using \ul hashmap\ulnone -working but there is a bug in the count of value when it is not \ul uniq\cf0 \ulnone \
        \cf4 // need to fix it\cf0 \
        
\f0\b \cf2 int
\f1\b0 \cf0  \cf3 l\cf0  = 
\f2\i findNumberUsingHashMap
\f1\i0 (\cf3 number\cf0 );\
        System.
\f3\i\b \cf5 out
\f1\i0\b0 \cf0 .println(\cf3 l\cf0 );\
\
    \}\
\
    
\f0\b \cf2 private
\f1\b0 \cf0  
\f0\b \cf2 static
\f1\b0 \cf0  
\f0\b \cf2 int
\f1\b0 \cf0  findNumberUsingHashMap(
\f0\b \cf2 int
\f1\b0 \cf0 [] \cf3 number\cf0 ) \{\
        Map<Integer, Integer> \cf3 findUniqKey\cf0  = 
\f0\b \cf2 new
\f1\b0 \cf0  HashMap<>();\
        
\f0\b \cf2 int
\f1\b0 \cf0  \cf3 value\cf0  = 1;\
        
\f0\b \cf2 for
\f1\b0 \cf0  (
\f0\b \cf2 int
\f1\b0 \cf0  \cf3 i\cf0  : \cf3 number\cf0 ) \{\
            
\f0\b \cf2 if
\f1\b0 \cf0  (!\cf3 findUniqKey\cf0 .containsKey(\cf3 i\cf0 )) \{\
                \cf3 findUniqKey\cf0 .put(\cf3 i\cf0 , \cf3 value\cf0 );\
            \} 
\f0\b \cf2 else
\f1\b0 \cf0  \{\
                \cf3 findUniqKey\cf0 .put(\cf3 i\cf0 , ++\cf3 value\cf0 );\
            \}\
        \}\
\
        
\f0\b \cf2 for
\f1\b0 \cf0  (
\f0\b \cf2 int
\f1\b0 \cf0  \cf3 key\cf0  : \cf3 findUniqKey\cf0 .keySet()) \{\
            
\f0\b \cf2 if
\f1\b0 \cf0  (\cf3 findUniqKey\cf0 .get(\cf3 key\cf0 ) == 1) \{\
                
\f0\b \cf2 return
\f1\b0 \cf0  \cf3 key\cf0 ;\
            \}\
        \}\
        
\f0\b \cf2 return
\f1\b0 \cf0  0;\
    \}\
\
    \cf4 // not working need to work on it\cf0 \
    
\f0\b \cf2 private
\f1\b0 \cf0  
\f0\b \cf2 static
\f1\b0 \cf0  
\f0\b \cf2 int
\f1\b0 \cf0  findNumber(
\f0\b \cf2 int
\f1\b0 \cf0 [] \cf3 number\cf0 ) \{\
\
        
\f0\b \cf2 int
\f1\b0 \cf0  \cf3 i\cf0  = 0;\
        
\f0\b \cf2 int
\f1\b0 \cf0  \cf3 j\cf0  = \cf3 number\cf0 .\cf5 length\cf0  - 1;\
        
\f0\b \cf2 boolean
\f1\b0 \cf0  \cf3 \ul \ulc3 uniqNumberFound\cf0 \ulnone  = 
\f0\b \cf2 false
\f1\b0 \cf0 ;\
        
\f0\b \cf2 for
\f1\b0 \cf0  (\cf3 i\cf0  = 0; \cf3 i\cf0  < \cf3 j\cf0 ; \cf3 i\cf0 ++) \{\
            
\f0\b \cf2 for
\f1\b0 \cf0  (
\f0\b \cf2 int
\f1\b0 \cf0  \cf3 k\cf0  = \cf3 i\cf0  + 1; \cf3 k\cf0  <= \cf3 j\cf0 ; \cf3 k\cf0 ++) \{\
                
\f0\b \cf2 if
\f1\b0 \cf0  (\cf3 number\cf0 [\cf3 i\cf0 ] == \cf3 number\cf0 [\cf3 k\cf0 ]) \{\
                    
\f0\b \cf2 continue
\f1\b0 \cf0 ;\
                \}\
                \cf3 uniqNumberFound\cf0  = 
\f0\b \cf2 true
\f1\b0 \cf0 ;\
                
\f0\b \cf2 return
\f1\b0 \cf0  \cf3 number\cf0 [\cf3 i\cf0 ];\
            \}\
\
        \}\
\
        
\f0\b \cf2 return
\f1\b0 \cf0  0;\
\
    \}\
\
    
\f0\b \cf2 public
\f1\b0 \cf0  
\f0\b \cf2 static
\f1\b0 \cf0  
\f0\b \cf2 int
\f1\b0 \cf0  findNumberUsingSet(
\f0\b \cf2 int
\f1\b0 \cf0 [] \cf3 A\cf0 ) \{\
        Set<Integer> \cf3 s\cf0  = 
\f0\b \cf2 new
\f1\b0 \cf0  HashSet<Integer>();\
        
\f0\b \cf2 for
\f1\b0 \cf0  (
\f0\b \cf2 int
\f1\b0 \cf0  \cf3 i\cf0  : \cf3 A\cf0 ) \{\
            
\f0\b \cf2 if
\f1\b0 \cf0  (!\cf3 s\cf0 .add(\cf3 i\cf0 )) \{\
                \cf3 s\cf0 .remove(\cf3 i\cf0 );\
            \}\
        \}\
        
\f0\b \cf2 return
\f1\b0 \cf0  \cf3 s\cf0 .iterator()\
                .next();\
    \}\
\
\}\
}